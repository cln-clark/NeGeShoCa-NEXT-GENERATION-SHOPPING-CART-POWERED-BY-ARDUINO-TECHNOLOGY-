
#include <Wire.h>
#include <WiFi.h>
#include <WiFiManager.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Firebase configuration
const char* firebaseHost = "https://negeshoca-default-rtdb.asia-southeast1.firebasedatabase.app/";
const char* firebaseSecret = "aqIDMrC0R7etPI90ruleFNVAeuxnlpFNMfFxGhlN";

const char* printUrl = "https://negeshoca-default-rtdb.asia-southeast1.firebasedatabase.app/toPrintReceipt/";

// Timing variables
unsigned long previousMillis = 0;
const long interval = 6000; // 6 seconds interval
bool fetched = false;

// Barcode scanner setup
HardwareSerial GM67Serial(2); // UART2 for the barcode scanner

// Printer setup
HardwareSerial thermalPrinter(1); // UART1 for the thermal printer

// Wi-Fi setup
WiFiManager wifiManager;

// HTTP client
HTTPClient http;

// Barcode data
String barcodeData;

// ----------- Functions ---------------------------------------------------------------------

// Fetch product details from Firebase
void fetchProductDetails(String barcode) {
  String url = String(firebaseHost) + "/products/" + barcode + ".json?auth=" + firebaseSecret;
  http.begin(url.c_str());

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    StaticJsonDocument<200> doc;
    deserializeJson(doc, payload);

    if (doc.containsKey("productName") && doc.containsKey("productPrice") && doc.containsKey("productBarcode")) {
      String productName = doc["productName"].as<String>();
      float productPrice = doc["productPrice"].as<float>();
      String productBarcode = doc["productBarcode"].as<String>();
      
      updateScannedItemInFirebase(barcode, productName, productPrice, productBarcode);
    } else {
      Serial.println("Error: Missing product details.");

      productNotFound();
    }
  } else {
    Serial.println("Failed to fetch product details. HTTP response code: " + String(httpResponseCode));
  }

  http.end();
}

// Update scanned item details in Firebase
void updateScannedItemInFirebase(String barcode, String productName, float productPrice, String productBarcode) {
  String url = String(firebaseHost) + "/scannedItems/" + barcode + ".json?auth=" + firebaseSecret;
  http.begin(url.c_str());
  http.addHeader("Content-Type", "application/json");

  // Fetch existing data
  int httpResponseCode = http.GET();
  String existingData = http.getString();

  StaticJsonDocument<200> doc;
  if (httpResponseCode == 200) {
    deserializeJson(doc, existingData);
    int qty = doc["qty"] | 0; // Default to 0 if "qty" is missing
    doc["qty"] = qty + 1;
  } else {
    doc["qty"] = 1;
  }

  doc["productName"] = productName;
  doc["productPrice"] = productPrice;
  doc["productBarcode"] = productBarcode;

  // Send updated data
  String jsonToSend;
  serializeJson(doc, jsonToSend);
  int updateResponseCode = http.PUT(jsonToSend);

  if (updateResponseCode == 200) {
    Serial.println("Scanned item updated successfully.");
  } else {
    Serial.println("Failed to update scanned item. HTTP response code: " + String(updateResponseCode));
  }

  http.end();
}

// Setting flag if scanned product/barcode doesn't exist in firebase
void productNotFound(){
  String url = String(firebaseHost) + "/isProductExisting.json?auth=" + firebaseSecret;
  http.begin(url.c_str());
  http.addHeader("Content-Type", "application/json");

  // Fetch existing data
  int httpResponseCode = http.GET();
  String existingData = http.getString();

  StaticJsonDocument<200> doc;

  if (httpResponseCode == 200) {
    DeserializationError error = deserializeJson(doc, existingData);
    if (error) {
      Serial.print("Failed to deserialize JSON: ");
      Serial.println(error.f_str());
      http.end();
      return;
    }
    
    bool doExist = doc["isExisting"]; // Check if product exists
    bool doesNotExist = !doExist; // Set flag if product does not exist
    
    // Update the product flag if it doesn't exist
    doc["isExisting"] = doesNotExist;
  } else {
    Serial.print("isProductExisting node does not have data");
    http.end();
    return;
  }

  // Prepare the JSON data to send
  String jsonToSend;
  serializeJson(doc, jsonToSend);
  int updateResponseCode = http.PUT(jsonToSend);

  if (updateResponseCode == 200) {
    Serial.println("Product flag is updated successfully");
  } else {
    Serial.println("Failed to update flag. HTTP response code: " + String(updateResponseCode));
  }

  http.end();
}



// Fetch data from Firebase for receipt printing
void fetchDataFromAPI() {
  String urlPrint = String(printUrl) + ".json?auth=" + firebaseSecret;
  http.begin(urlPrint);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Fetched data: ");
    Serial.println(payload);

    // print receipt for the current customer
    printReceipt(payload);

    fetched = true; // Mark as fetched to prevent repeated fetch
  } else {
    Serial.print("Error fetching data: ");
    Serial.println(httpCode);
  }

  http.end();
}

// Print receipt using the thermal printer
void printReceipt(const String& data) {
  // Parse the JSON payload
  StaticJsonDocument<1024> doc;
  DeserializationError error = deserializeJson(doc, data);

  if (error) {
    Serial.println("Failed to parse JSON for printing.");
    return;
  }

  // Iterate over the dynamic keys in the JSON (order IDs)
  for (JsonPair kv : doc.as<JsonObject>()) {
    // kv.key() gives you the dynamic key (e.g., "PYD-70759-HTNOP")
    String orderKey = kv.key().c_str();
    JsonObject orderDetails = kv.value().as<JsonObject>();

    if (!orderDetails.containsKey("items") || !orderDetails["items"].is<JsonArray>()) {
      Serial.println("No items found.");
      return;
    }

    // Print header
    thermalPrinter.write(0x1B);  // ESC
    thermalPrinter.write(0x40);  // Initialize printer
    thermalPrinter.println("NEGESHOCA RECEIPT");
    thermalPrinter.println("======================");

    // Print items from the payload
    JsonArray items = orderDetails["items"].as<JsonArray>();
    for (JsonObject item : items) {
      String name = item["productName"].as<String>();
      float price = item["productPrice"].as<float>();
      int qty = item["productQty"].as<int>();
      float totalPricePerItem = item["totalPricePerItem"].as<float>();

      // Print product info with quantity and total price per item
      thermalPrinter.printf("%s x%d P%.2f\n", name.c_str(), qty, totalPricePerItem);
    }

    // Print total
    float total = orderDetails["total"].as<float>();
    thermalPrinter.println("----------------------");
    thermalPrinter.printf("TOTAL: P%.2f\n", total);
    thermalPrinter.println("======================");
    thermalPrinter.write(0x0A);  // Line Feed for spacing

    // archive and delete nodes to prepare for next customer
    archiveAndClearData(orderKey);
  }

  
}

void archiveAndClearData(String checkoutID) {
  String fetchURL = String(printUrl) + checkoutID + ".json?auth=" + firebaseSecret;
  http.begin(fetchURL.c_str());
  int httpResponseCode = http.GET();

  if (httpResponseCode > 0) {
    String payload = http.getString();
    http.end(); // Close connection after GET request

    String archiveURL = String(firebaseHost) + "/paidArchives/" + checkoutID + ".json?auth=" + firebaseSecret;
    http.begin(archiveURL.c_str());
    http.addHeader("Content-Type", "application/json");
    int postResponseCode = http.PUT(payload);

    if (postResponseCode == 200) {
      deleteFirebaseNodes(checkoutID);
      fetched = false;
    } else {
      Serial.print("Failed to archive data. Response code: ");
      Serial.println(postResponseCode);
    }

    http.end(); // Close connection after PUT request
  } else {
    Serial.print("Failed to fetch data for archiving. Response code: ");
    Serial.println(httpResponseCode);
    http.end(); // Close connection after GET request
  }
}


void deleteFirebaseNodes(String checkoutID) {
  // List of nodes to delete
  String nodes[] = {
    "/payingSession.json",
    "/scannedItems.json",
    "/toPrintReceipt/" + checkoutID + ".json"
  };

  for (String node : nodes) {
    String url = String(firebaseHost) + node + "?auth=" + firebaseSecret;
    http.begin(url.c_str());
    int httpResponseCode = http.sendRequest("DELETE");

    if (httpResponseCode == 200) {
      Serial.print("Deleted node: ");
      Serial.println(node);
    } else {
      Serial.print("Failed to delete node: ");
      Serial.println(node);
    }

    http.end(); // Close connection for each node
  }
}



// ----------- Setup and Loop ----------------------------------------------------------------

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  if (!wifiManager.autoConnect("ESP32_AutoConnect")) {
    Serial.println("Failed to connect to WiFi and hit timeout.");
    delay(3000);
    ESP.restart();
  }
  Serial.println("Connected to WiFi!");

  // Initialize barcode scanner and printer
  GM67Serial.begin(9600, SERIAL_8N1, 16, 17);
  thermalPrinter.begin(9600, SERIAL_8N1, 18, 19);
}

void loop() {

  // Fetch receipt data every 6 seconds
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    fetchDataFromAPI();

    fetched = false;
  }

  // Read barcode data
  if (GM67Serial.available()) {
    delay(1000);
    barcodeData = GM67Serial.readString();
    barcodeData.trim();
    Serial.println("Received from GM67: " + barcodeData);
    fetchProductDetails(barcodeData);
  }

  
}
